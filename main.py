import logging
import time
import traceback
from datetime import datetime

import openai
import asyncio
import spacy

from aiogram import Bot, Dispatcher, types
from aiogram.utils import exceptions
from config import API_KEYS, BOT_KEYS, ID, MAX_MESSAGE_LENGTH
from faq import faq

# –Ø–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è spacy (en_core_web_sm –∏–ª–∏ ru_core_news_sm)
nlp = spacy.load("ru_core_news_sm")

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot.log', level=logging.INFO)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API-–∫–ª—é—á OpenAI –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ TG —Å —Ç–æ–∫–µ–Ω–æ–º
openai.api_key = API_KEYS
bot = Bot(token=BOT_KEYS)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
dp = Dispatcher(bot)

# –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏—Ö —Ä–æ–ª–µ–π
messages_history = []


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /log –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞
@dp.message_handler(commands=['log'])
async def send_log_button(message: types.Message):
    user_id = ID
    if message.from_user.id == user_id:
        with open('bot.log', 'rb') as f:
            await bot.send_document(user_id, f)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_log –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞
@dp.message_handler(commands=['clear_log'])
async def clear_log(message: types.Message):
    user_id = ID
    if message.from_user.id == user_id:
        open('bot.log', 'w').close()
        await message.answer("–§–∞–π–ª –ª–æ–≥–æ–≤ –æ—á–∏—â–µ–Ω.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞
@dp.message_handler(commands=['help'])
async def help_button(message: types.Message):
    await message.answer(faq)


@dp.message_handler(commands=['clear'])
async def clear_history_button(message: types.Message):
    global messages_history
    messages_history = []
    await message.answer("üóë –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")


# –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
def split_text(text, max_length):
    return [text[i:i + max_length] for i in range(0, len(text), max_length)]


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n\n\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–∑–Ω—ã–º —Ç–µ–º–∞–º.\n–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –º–Ω–µ —Å–≤–æ–π "
                        "–≤–æ–ø—Ä–æ—Å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç.\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π ("
                        "–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—à–ª—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤), –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /clear, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç ChatGPT –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ "
                        "–Ω–∞ –Ω–æ–≤—É—é —Ç–µ–º—É \n\n\n–ë–æ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É–ª—É—á—à–∞–µ—Ç—Å—è, –Ω–æ –±—ã–ª–æ –±—ã –∫—Ä—É—Ç–æ, –µ—Å–ª–∏ –±—ã –≤—ã "
                        "–ø–æ–¥–µ–ª–∏–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é @Safronjack")


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def handle_message(message: types.Message):
    global messages_history
    start_time = time.time()  # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    processing_message = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –≤–æ–ø—Ä–æ—Å. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
    await bot.send_chat_action(message.chat.id, "typing")

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é spacy –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ —Ñ—Ä–∞–∑ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        doc = nlp(message.text)
        entities = []
        for ent in doc.ents:
            entities.append((ent.text, ent.label_))
        messages_history.append({"role": "user", "content": message.text})
        response = openai.api_resources.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages_history,
            stop=None,
            temperature=0.4,
            stream=False
        )

        text = response.choices[0].message.content
        messages_history.append({"role": "assistant", "content": text})

        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(text) > MAX_MESSAGE_LENGTH:
            text_parts = split_text(text, MAX_MESSAGE_LENGTH)
            for part in text_parts:
                await message.answer(part)
        else:
            await message.answer(text)

    except openai.error.RateLimitError as e:
        tb = traceback.format_exc()
        logging.exception(f"{datetime.now()} - {tb}")
        await message.answer(
            "‚ùå –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.")
    except openai.error.InvalidRequestError as e:
        tb = traceback.format_exc()
        logging.exception(f"{datetime.now()} - {tb}")
        await message.answer(
            "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –∫ API. –î–ª—è –º–æ–¥–µ–ª–∏ GPT 3.5 turbo –º–∞–∫—Å–∏–º—É–º 4097 —Ç–æ–∫–µ–Ω–æ–≤. –û—á–∏—Å—Ç–∏—Ç–µ "
            "–∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥–æ–π /clear. –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ FAQ")
    except IndexError as e:
        tb = traceback.format_exc()
        logging.exception(f"{datetime.now()} - {tb}")
        await message.answer(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.")
    except KeyError as e:
        tb = traceback.format_exc()
        logging.exception(f"{datetime.now()} - {tb}")
        await message.answer(
            "‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –û—á–∏—Å—Ç–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥–æ–π /clear –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.")
    except TypeError as e:
        tb = traceback.format_exc()
        logging.exception(f"{datetime.now()} - {tb}")
        await message.answer(
            "‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –û—á–∏—Å—Ç–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥–æ–π /clear –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.")
    except spacy.errors.Errors as e:
        tb = traceback.format_exc()
        logging.exception(f"{datetime.now()} - {tb}")
        await message.answer(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.")
    except exceptions.NetworkError as e:
        tb = traceback.format_exc()
        logging.exception(f"{datetime.now()} - {tb}")
        await message.answer(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, Telegram API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.")
    except ConnectionError as e:
        tb = traceback.format_exc()
        logging.exception(f"{datetime.now()} - {tb}")
        await message.answer(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, Telegram API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.")
    except exceptions.BadRequest as e:
        tb = traceback.format_exc()
        logging.exception(f"{datetime.now()} - {tb}")
        await message.answer(
            "‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –û—á–∏—Å—Ç–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥–æ–π /clear –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.")
    except exceptions.Unauthorized as e:
        tb = traceback.format_exc()
        logging.exception(f"{datetime.now()} - {tb}")
        await message.answer(
            "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞. –ü—Ä–æ—Å—å–±–∞ —Å–≤—è–∑–∞—Ç—å—Å—è —Å @Safronjack.")
    except Exception as e:
        tb = traceback.format_exc()
        logging.exception(f"{datetime.now()} - {tb}")
        await message.answer(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.")

    finally:
        await processing_message.delete()

        # –≤—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ª–æ–≥–∏—Ä—É–µ–º –µ–≥–æ
        end_time = time.time()
        elapsed_time = end_time - start_time
        logging.info(f"{datetime.now()} - @User {message.from_user.id}: {message.text} \n{elapsed_time:.3f} sec.")


# –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è API ChatGPT
@dp.message_handler()
async def send_reply(message: types.Message):
    asyncio.create_task(handle_message(message))


if __name__ == '__main__':
    asyncio.run(dp.start_polling())
